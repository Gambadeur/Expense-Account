'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var serializeObject = function serializeObject(form, key, col) {
	var _iteratorNormalCompletion = true;
	var _didIteratorError = false;
	var _iteratorError = undefined;

	try {
		for (var _iterator = Object.keys(col)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
			var key2 = _step.value;

			if (!Number.isNaN(+key2)) {
				serializeValue(form, key, col[key2]);
			} else {
				serializeValue(form, key + '.' + key2, col[key2]);
			}
		}
	} catch (err) {
		_didIteratorError = true;
		_iteratorError = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion && _iterator.return) {
				_iterator.return();
			}
		} finally {
			if (_didIteratorError) {
				throw _iteratorError;
			}
		}
	}

	return form;
};

var serializeValue = function serializeValue(form, key, value) {
	if (typeof value !== 'string' && typeof value[Symbol.iterator] === 'function') {
		// pour les fichiers et les tableaux
		return serializeIterable(form, key, value);
	} else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
		return serializeObject(form, key, value);
	}
	return form.append(key, value);
};

var serializeIterable = function serializeIterable(form, key, col) {
	var _iteratorNormalCompletion2 = true;
	var _didIteratorError2 = false;
	var _iteratorError2 = undefined;

	try {
		for (var _iterator2 = col[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
			var el = _step2.value;

			form.append(key, el);
		}
	} catch (err) {
		_didIteratorError2 = true;
		_iteratorError2 = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion2 && _iterator2.return) {
				_iterator2.return();
			}
		} finally {
			if (_didIteratorError2) {
				throw _iteratorError2;
			}
		}
	}

	return form;
};

/**
 * Transforme un objet représentant les données d'un formulaire en objet
 * de type FormData, prêt à être envoyé via un fetch, par exemple.
 *
 * L'avantage par rapport à un simple new FormData(form) est que l'on ne
 * se repose pas sur la présence d'un <form>. On peut donc l'utiliser quand
 * la représentation d'un champ de formulaire n'est pas un input standard,
 * comme les listes déroulantes de material-ui.
 *
 * @param values
 * @returns {*}
 */
var serializeFormValues = exports.serializeFormValues = function serializeFormValues(values) {
	var form = new FormData();
	var _iteratorNormalCompletion3 = true;
	var _didIteratorError3 = false;
	var _iteratorError3 = undefined;

	try {
		for (var _iterator3 = Object.keys(values)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
			var key = _step3.value;

			var value = values[key];
			if (typeof value === 'undefined' || value === null) {
				continue;
			}
			serializeValue(form, key, value);
		}
	} catch (err) {
		_didIteratorError3 = true;
		_iteratorError3 = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion3 && _iterator3.return) {
				_iterator3.return();
			}
		} finally {
			if (_didIteratorError3) {
				throw _iteratorError3;
			}
		}
	}

	return form;
};