'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _handlers;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = reducer;

var _actions = require('./actions');

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var initial = {
	base: {
		text: undefined,
		isOpen: false,
		highlightedIndex: null,
		items: []
	},
	liste: []
};

function getViewItems(props) {
	var items = props.staticItems,
	    shouldItemRender = props.shouldItemRender,
	    sortItems = props.sortItems,
	    sortGroups = props.sortGroups;

	if (shouldItemRender) {
		items = items.filter(function (item) {
			return shouldItemRender(item, props.text);
		});
	}
	if (sortGroups) {
		var groups = {};
		items.forEach(function (item) {
			var group = groups[item.group];
			if (!group) {
				group = groups[item.group] = [];
			}
			group.push(item);
		});

		var groupNames = Object.keys(groups);
		groupNames.sort(sortGroups);

		items = groupNames.map(function (name) {
			return groups[name];
		}).reduce(function (list, unsorted) {
			var items = unsorted.slice(0);
			sortItems && items.sort(function (a, b) {
				return sortItems(a, b, props.text);
			});
			return list.concat(items);
		}, []);
	} else if (sortItems) {
		items.sort(function (a, b) {
			return sortItems(a, b, props.text);
		});
	}
	return items;
}

var handlers = (_handlers = {}, _defineProperty(_handlers, _actions.INIT, function (state, action) {
	var name = action.payload.props.name;

	var newState = _extends({}, state);
	newState.liste[name] = _extends({}, state.base);
	return _extends({}, newState);
}), _defineProperty(_handlers, _actions.SET_TEXT, function (state, action) {
	var props = action.payload.props;

	var name = props.name;
	var items = props.staticItems ? getViewItems(props) : state.liste[name].items;

	var newState = _extends({}, state);
	newState.liste[name] = _extends({}, newState.liste[name], { text: props.text, items: items });
	return _extends({}, newState);
}), _defineProperty(_handlers, _actions.CLEAR_TEXT, function (state, action) {
	var name = action.payload.name;

	var newState = _extends({}, state);
	newState.liste[name] = _extends({}, newState.liste[name], { text: '' });
	return _extends({}, newState);
}), _defineProperty(_handlers, _actions.OPEN_LIST, function (state, action) {
	var props = action.payload.props;
	var name = props.name;

	var items = props.staticItems ? getViewItems(props) : state.liste[name].items;

	var newState = _extends({}, state);
	newState.liste[name] = _extends({}, newState.liste[name], { isOpen: true, highlightedIndex: null, items: items });
	return _extends({}, newState);
}), _defineProperty(_handlers, _actions.CLOSE_LIST, function (state, action) {
	var newState = _extends({}, state);
	var name = action.payload.name;

	newState.liste[name] = _extends({}, newState.liste[name], { isOpen: false, highlightedIndex: null });
	return _extends({}, newState);
}), _defineProperty(_handlers, _actions.SET_ITEMS, function (state, action) {
	var newState = _extends({}, state);
	var name = action.payload.name;

	newState.liste[name] = _extends({}, newState.liste[name], { items: action.payload.items });
	return _extends({}, newState);
}), _defineProperty(_handlers, _actions.CLEAR_ITEMS, function (state, action) {
	var newState = _extends({}, state);
	var name = action.payload.name;

	newState.liste[name] = _extends({}, newState.liste[name], { items: [] });
	return _extends({}, newState);
}), _defineProperty(_handlers, _actions.SELECT_ITEM, function (state, action) {
	var _action$payload = action.payload,
	    index = _action$payload.index,
	    isOpen = _action$payload.isOpen,
	    _action$payload$props = _action$payload.props,
	    name = _action$payload$props.name,
	    getItemValue = _action$payload$props.getItemValue;

	var item = state.liste[name].items[index];
	var newState = _extends({}, state);
	newState.liste[name] = _extends({}, newState.liste[name], { isOpen: isOpen || false, highlightedIndex: null, text: getItemValue(item) });
	return _extends({}, newState);
}), _defineProperty(_handlers, _actions.SET_HIGHLIGHT, function (state, action) {
	var newState = _extends({}, state);
	var name = action.payload.name;

	newState.liste[name] = _extends({}, newState.liste[name], { isOpen: true, highlightedIndex: action.payload.index });
	return _extends({}, newState);
}), _defineProperty(_handlers, _actions.CLEAR_HIGHLIGHT, function (state, action) {
	var newState = _extends({}, state);
	var name = action.payload.props.name;

	newState.liste[name] = _extends({}, newState.liste[name], { highlightedIndex: null });
	return _extends({}, newState);
}), _handlers);

function reducer() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initial;
	var action = arguments[1];

	var handler = handlers[action.type];
	return handler ? handler(state, action) : state;
}