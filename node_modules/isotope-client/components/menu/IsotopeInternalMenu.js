'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _reactRouterRedux = require('react-router-redux');

var _menuActions = require('./menuActions');

var menuActions = _interopRequireWildcard(_menuActions);

var _Divider = require('material-ui/Divider');

var _Divider2 = _interopRequireDefault(_Divider);

var _List = require('material-ui/List');

var _reactIntl = require('react-intl');

var _SvgIcon = require('material-ui/SvgIcon');

var _SvgIcon2 = _interopRequireDefault(_SvgIcon);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SelectableList = function (_makeSelectable) {
	_inherits(SelectableList, _makeSelectable);

	function SelectableList() {
		_classCallCheck(this, SelectableList);

		return _possibleConstructorReturn(this, (SelectableList.__proto__ || Object.getPrototypeOf(SelectableList)).apply(this, arguments));
	}

	_createClass(SelectableList, [{
		key: 'isChildSelected',
		value: function isChildSelected(child, props) {
			return props.value.indexOf(child.props.value) === 0;
		}
	}]);

	return SelectableList;
}((0, _List.makeSelectable)(_List.List));

var IsotopeMenu = function (_Component) {
	_inherits(IsotopeMenu, _Component);

	function IsotopeMenu(props) {
		_classCallCheck(this, IsotopeMenu);

		var _this2 = _possibleConstructorReturn(this, (IsotopeMenu.__proto__ || Object.getPrototypeOf(IsotopeMenu)).call(this, props));

		var entries = props.entries,
		    getMenu = props.getMenu,
		    code = props.code;

		if (!entries || Object.keys(entries).length === 0) {
			getMenu(code);
		}
		return _this2;
	}

	_createClass(IsotopeMenu, [{
		key: 'renderEntries',
		value: function renderEntries(entries, onItemClick, changeMenu) {
			var _this3 = this;

			if (entries) {
				return Object.keys(entries).reduce(function (tab, entry) {
					return [].concat(_toConsumableArray(tab), [entries[entry]]);
				}, []).map(function (entry, index) {
					return _this3.renderEntry(entry, index, onItemClick, changeMenu);
				});
			}
			return undefined;
		}
	}, {
		key: 'renderEntry',
		value: function renderEntry(entry, index, onItemClick, changeMenu) {
			var component = void 0;
			var props = {
				key: index
			};
			switch (entry.type) {
				case 'FUNCTION':
				case 'LINK':
					component = _List.ListItem;
					props.primaryText = _react2.default.createElement(_reactIntl.FormattedMessage, { id: '' + entry.code });
					props.style = { fontSize: '15px' };

					if (onItemClick) {
						props.onTouchTap = onItemClick;
					}
					if (!entry.children || entry.children.length === 0) {
						props.value = entry.url;
					} else {
						props.primaryTogglesNestedList = true;
						props.nestedItems = this.renderEntries(entry.children);
					}
					if (entry.icon) {
						props.leftIcon = _react2.default.createElement(
							_SvgIcon2.default,
							null,
							_react2.default.createElement('path', { d: '' + entry.icon })
						);
					}
					break;
				case 'DIVIDER':
					component = _Divider2.default;
					break;
				case 'TEXT':
					break;
				default:
			}
			if (component) {
				return _react2.default.createElement(component, props);
			}
			return undefined;
		}
	}, {
		key: 'render',
		value: function render() {
			var _props = this.props,
			    entries = _props.entries,
			    changeMenu = _props.changeMenu,
			    location = _props.location,
			    onItemClick = _props.onItemClick;


			return _react2.default.createElement(
				SelectableList,
				{
					value: location.pathname,
					onChange: changeMenu
				},
				this.renderEntries(entries, onItemClick, changeMenu)
			);
		}
	}]);

	return IsotopeMenu;
}(_react.Component);

IsotopeMenu.propTypes = {
	code: _react.PropTypes.string.isRequired,
	location: _react.PropTypes.object.isRequired,
	onItemClick: _react.PropTypes.func,
	getMenu: _react.PropTypes.func.isRequired,
	changeMenu: _react.PropTypes.func.isRequired,
	entries: _react.PropTypes.object
};

var mapStateToProps = function mapStateToProps(state, ownProps) {
	return {
		entries: state.menu[ownProps.code]
	};
};

var actions = {
	getMenu: menuActions.getMenu,
	changeMenu: function changeMenu(event, value) {
		return function (dispatch) {
			return dispatch((0, _reactRouterRedux.push)(value));
		};
	}
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, actions)(IsotopeMenu);