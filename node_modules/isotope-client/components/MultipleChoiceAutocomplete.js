"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require("react-redux");

var _index = require("./autocomplete/index");

var _Chip = require("material-ui/Chip");

var _Chip2 = _interopRequireDefault(_Chip);

var _IconButton = require("material-ui/IconButton");

var _IconButton2 = _interopRequireDefault(_IconButton);

var _Popover = require("material-ui/Popover/Popover");

var _Popover2 = _interopRequireDefault(_Popover);

var _add = require("material-ui/svg-icons/content/add");

var _add2 = _interopRequireDefault(_add);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = {
	chip: {
		margin: 4
	},
	wrapper: {
		display: 'flex',
		flexWrap: 'wrap'
	}
};

var MultipleChoiceAutocomplete = function (_Component) {
	_inherits(MultipleChoiceAutocomplete, _Component);

	function MultipleChoiceAutocomplete(props) {
		_classCallCheck(this, MultipleChoiceAutocomplete);

		var _this = _possibleConstructorReturn(this, (MultipleChoiceAutocomplete.__proto__ || Object.getPrototypeOf(MultipleChoiceAutocomplete)).call(this, props));

		_this.state = {
			openAdd: false,
			text: ''
		};
		_this.handleRequestClose = _this.handleRequestClose.bind(_this);
		_this.ajouterChip = _this.ajouterChip.bind(_this);
		_this.supprimerChip = _this.supprimerChip.bind(_this);
		_this.handleTouchTap = _this.handleTouchTap.bind(_this);
		return _this;
	}

	_createClass(MultipleChoiceAutocomplete, [{
		key: "handleTouchTap",
		value: function handleTouchTap(event) {
			event.preventDefault();
			this.setState(_extends({}, this.state, {
				openAdd: true,
				anchorEl: event.currentTarget
			}));
		}
	}, {
		key: "handleRequestClose",
		value: function handleRequestClose() {
			this.setState(_extends({}, this.state, {
				openAdd: false
			}));
		}
	}, {
		key: "supprimerChip",
		value: function supprimerChip(chip, onChange) {
			var value = this.props.value;

			onChange(value.filter(function (dispo) {
				return dispo !== chip;
			}));
		}
	}, {
		key: "ajouterChip",
		value: function ajouterChip(element, onChange) {
			var value = this.props.value;

			if (!value) value = [];
			value.push(element);
			onChange(value);
		}
	}, {
		key: "render",
		value: function render() {
			var _this2 = this;

			var _props = this.props,
			    title = _props.title,
			    onChange = _props.onChange,
			    value = _props.value,
			    stylePopover = _props.stylePopover,
			    loadFunction = _props.loadFunction,
			    name = _props.name,
			    items = _props.items;
			var muiTheme = this.context.muiTheme;


			var internalStyles = {
				controls: {
					display: 'flex',
					width: '100%',
					height: '100%',
					alignItems: 'center'
				},
				label: {
					float: 'left',
					position: 'relative',
					display: 'block',
					lineHeight: '24px',
					color: muiTheme.palette.textColor,
					fontFamily: muiTheme.fontFamily
				},
				root: {
					position: 'relative',
					cursor: 'pointer',
					overflow: 'visible',
					display: 'table',
					height: 'auto',
					width: '100%'
				}
			};

			return _react2.default.createElement(
				"div",
				{ style: internalStyles.root },
				_react2.default.createElement(
					"div",
					{ style: internalStyles.controls },
					_react2.default.createElement(
						"label",
						{ style: internalStyles.label },
						title
					),
					_react2.default.createElement(
						_IconButton2.default,
						{
							onTouchTap: this.handleTouchTap
						},
						_react2.default.createElement(_add2.default, { color: muiTheme.palette.primary1Color })
					),
					_react2.default.createElement(
						_Popover2.default,
						{
							style: _extends({ overflowY: 'auto' }, stylePopover),
							open: this.state.openAdd,
							anchorEl: this.state.anchorEl,
							onRequestClose: this.handleRequestClose
						},
						_react2.default.createElement(_index.Autocomplete, {
							name: name,
							inputProps: {
								style: {
									margin: '0 10px',
									width: 200
								},
								fullWidth: false
							},
							fullWidth: true,
							noclearOnSelect: true,
							getItemValue: function getItemValue(item) {
								return item ? item.label : '';
							},
							onChange: function onChange(text, name, dispatch) {
								if (text !== '') {
									if (text.length > 1) {
										loadFunction(text).then(function (json) {
											var items = json.map(function (item) {
												return { label: item, id: item };
											}).filter(function (item) {
												return value.indexOf(item.label) === -1;
											});
											dispatch(_index.actions.setItems({ name: name, items: items }));
										});
									} else {
										dispatch(_index.actions.setItems({ name: name, items: [] }));
									}
								}
							},
							onSelect: function onSelect(value) {
								_this2.ajouterChip(value, onChange);
								if (items.filter(function (item) {
									return value.indexOf(item.label) === -1;
								}).length === 0) {
									_this2.handleRequestClose();
								}
							}
						})
					)
				),
				value.length > 0 && _react2.default.createElement(
					"div",
					{ style: styles.wrapper },
					value.map(function (chip, index) {
						return _react2.default.createElement(
							_Chip2.default,
							{
								style: styles.chip,
								key: index,
								onRequestDelete: function onRequestDelete() {
									return _this2.supprimerChip(chip, onChange);
								},
								onTouchTap: function onTouchTap() {
									return _this2.supprimerChip(chip, onChange);
								}
							},
							chip
						);
					})
				)
			);
		}
	}]);

	return MultipleChoiceAutocomplete;
}(_react.Component);

MultipleChoiceAutocomplete.propTypes = {
	title: _react.PropTypes.string.isRequired,
	stylePopover: _react.PropTypes.object,
	loadFunction: _react.PropTypes.func.isRequired
};

MultipleChoiceAutocomplete.contextTypes = {
	muiTheme: _react.PropTypes.object.isRequired
};

function select(state, ownProps) {
	var local = void 0;
	if (state.autocomplete.liste[ownProps.name]) {
		local = state.autocomplete.liste[ownProps.name];
	} else {
		local = state.autocomplete.base;
	}
	return _extends({}, local, ownProps);
}

exports.default = (0, _reactRedux.connect)(select)(MultipleChoiceAutocomplete);