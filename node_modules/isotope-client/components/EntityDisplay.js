'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _IconButton = require('material-ui/IconButton');

var _IconButton2 = _interopRequireDefault(_IconButton);

var _FlatButton = require('material-ui/FlatButton');

var _FlatButton2 = _interopRequireDefault(_FlatButton);

var _modeEdit = require('material-ui/svg-icons/editor/mode-edit');

var _modeEdit2 = _interopRequireDefault(_modeEdit);

var _Dialog = require('material-ui/Dialog');

var _Dialog2 = _interopRequireDefault(_Dialog);

var _add = require('material-ui/svg-icons/content/add');

var _add2 = _interopRequireDefault(_add);

var _Toolbar = require('material-ui/Toolbar');

var _FloatingActionButton = require('material-ui/FloatingActionButton');

var _FloatingActionButton2 = _interopRequireDefault(_FloatingActionButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var style = {
	toolbar: {
		background: 'transparent',
		height: 40
	}
};

var EntityDisplay = function (_Component) {
	_inherits(EntityDisplay, _Component);

	function EntityDisplay(props) {
		_classCallCheck(this, EntityDisplay);

		var _this = _possibleConstructorReturn(this, (EntityDisplay.__proto__ || Object.getPrototypeOf(EntityDisplay)).call(this, props));

		_this.ouvrirEdit = _this.ouvrirEdit.bind(_this);
		_this.annulerEdit = _this.annulerEdit.bind(_this);
		_this.ouvrirAdd = _this.ouvrirAdd.bind(_this);
		_this.annulerAdd = _this.annulerAdd.bind(_this);
		_this.state = {
			openEdit: false,
			openAdd: false
		};
		return _this;
	}

	_createClass(EntityDisplay, [{
		key: 'ouvrirEdit',
		value: function ouvrirEdit() {
			this.setState({ openEdit: true });
		}
	}, {
		key: 'annulerEdit',
		value: function annulerEdit() {
			this.setState({ openEdit: false });
		}
	}, {
		key: 'ouvrirAdd',
		value: function ouvrirAdd() {
			this.setState({ openAdd: true });
		}
	}, {
		key: 'annulerAdd',
		value: function annulerAdd() {
			this.setState({ openAdd: false });
		}
	}, {
		key: 'render',
		value: function render() {
			var _this2 = this;

			var muiTheme = this.context.muiTheme;
			var _props = this.props,
			    children = _props.children,
			    title = _props.title,
			    edit = _props.edit,
			    editTitle = _props.editTitle,
			    editRender = _props.editRender,
			    add = _props.add,
			    addTitle = _props.addTitle,
			    addRender = _props.addRender;

			var actionsEdit = [_react2.default.createElement(_FlatButton2.default, {
				label: 'Annuler',
				primary: true,
				onTouchTap: this.annulerEdit
			}), _react2.default.createElement(_FlatButton2.default, {
				label: 'Valider',
				type: 'submit',
				primary: true,
				onTouchTap: function onTouchTap() {
					_this2.props.edit(_this2.annulerEdit);
				}
			})];
			var actionsAdd = [_react2.default.createElement(_FlatButton2.default, {
				label: 'Annuler',
				primary: true,
				onTouchTap: this.annulerAdd
			}), _react2.default.createElement(_FlatButton2.default, {
				label: 'Valider',
				type: 'submit',
				primary: true,
				onTouchTap: function onTouchTap() {
					_this2.props.add(_this2.annulerAdd);
				}
			})];
			var addDialog = _react2.default.createElement(
				_Dialog2.default,
				{
					title: addTitle,
					actions: actionsAdd,
					modal: true,
					autoScrollBodyContent: true,
					open: this.state.openAdd,
					onRequestClose: this.annulerAdd
				},
				addRender
			);
			var button = _react2.default.createElement(
				'div',
				null,
				_react2.default.createElement(
					_FloatingActionButton2.default,
					{ style: { position: 'absolute', bottom: '-65px', right: 0 }, onTouchTap: this.ouvrirAdd },
					_react2.default.createElement(_add2.default, { color: muiTheme.palette.primary1Color })
				),
				addDialog
			);
			if (title) button = _react2.default.createElement(
				_IconButton2.default,
				{ onTouchTap: this.ouvrirAdd },
				_react2.default.createElement(_add2.default, { color: muiTheme.palette.primary1Color }),
				addDialog
			);
			return _react2.default.createElement(
				'div',
				{ className: 'row' },
				_react2.default.createElement(
					'div',
					{ className: 'col-lg-12' },
					(edit || add) && title && _react2.default.createElement(
						_Toolbar.Toolbar,
						{ style: style.toolbar },
						_react2.default.createElement(
							_Toolbar.ToolbarGroup,
							{ firstChild: true },
							_react2.default.createElement(_Toolbar.ToolbarTitle, { text: title, style: { fontSize: '16px' } }),
							edit && _react2.default.createElement(
								_IconButton2.default,
								{ onTouchTap: this.ouvrirEdit },
								_react2.default.createElement(_modeEdit2.default, { color: muiTheme.palette.primary1Color }),
								_react2.default.createElement(
									_Dialog2.default,
									{
										title: editTitle,
										actions: actionsEdit,
										modal: true,
										autoScrollBodyContent: true,
										open: this.state.openEdit,
										onRequestClose: this.annulerEdit
									},
									editRender
								)
							),
							title && add && button
						)
					),
					_react2.default.createElement(
						'div',
						{ style: { position: 'relative' } },
						!title && add && button,
						children
					)
				)
			);
		}
	}]);

	return EntityDisplay;
}(_react.Component);

EntityDisplay.propTypes = {
	title: _react.PropTypes.string,
	children: _react.PropTypes.node,
	edit: _react.PropTypes.func,
	editTitle: _react.PropTypes.string,
	editRender: _react.PropTypes.node,
	editData: _react.PropTypes.object,
	add: _react.PropTypes.func,
	addTitle: _react.PropTypes.string,
	addRender: _react.PropTypes.node
};

EntityDisplay.contextTypes = {
	muiTheme: _react.PropTypes.object.isRequired
};

exports.default = EntityDisplay;