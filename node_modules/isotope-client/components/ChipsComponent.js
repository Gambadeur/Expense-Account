'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _IconButton = require('material-ui/IconButton');

var _IconButton2 = _interopRequireDefault(_IconButton);

var _Popover = require('material-ui/Popover/Popover');

var _Popover2 = _interopRequireDefault(_Popover);

var _add = require('material-ui/svg-icons/content/add');

var _add2 = _interopRequireDefault(_add);

var _Toolbar = require('material-ui/Toolbar');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var style = {
	toolbar: {
		background: 'transparent',
		height: 40
	},
	body: {
		paddingLeft: 15,
		paddingTop: 10
	}
};

var ChipsComponent = function (_Component) {
	_inherits(ChipsComponent, _Component);

	function ChipsComponent(props) {
		_classCallCheck(this, ChipsComponent);

		var _this = _possibleConstructorReturn(this, (ChipsComponent.__proto__ || Object.getPrototypeOf(ChipsComponent)).call(this, props));

		_this.ouvrirAdd = _this.ouvrirAdd.bind(_this);
		_this.handleRequestClose = _this.handleRequestClose.bind(_this);
		_this.handleTouchTap = _this.handleTouchTap.bind(_this);
		_this.state = {
			openAdd: false
		};
		return _this;
	}

	_createClass(ChipsComponent, [{
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps) {
			if (nextProps.display === 0) {
				this.setState({
					openAdd: false
				});
			}
		}
	}, {
		key: 'handleTouchTap',
		value: function handleTouchTap(event) {
			// This prevents ghost click.
			event.preventDefault();
			if (this.props.display > 0) {
				this.setState({
					openAdd: true,
					anchorEl: event.currentTarget
				});
			}
		}
	}, {
		key: 'ouvrirAdd',
		value: function ouvrirAdd() {
			this.setState({ openAdd: true });
		}
	}, {
		key: 'handleRequestClose',
		value: function handleRequestClose() {
			this.setState({ openAdd: false });
		}
	}, {
		key: 'render',
		value: function render() {
			var _props = this.props,
			    children = _props.children,
			    title = _props.title,
			    add = _props.add,
			    addRender = _props.addRender;
			var muiTheme = this.context.muiTheme;

			return _react2.default.createElement(
				'div',
				null,
				_react2.default.createElement(
					'div',
					{ className: 'row' },
					_react2.default.createElement(
						'div',
						{ className: 'col-lg-12' },
						_react2.default.createElement(
							_Toolbar.Toolbar,
							{ style: style.toolbar },
							_react2.default.createElement(
								_Toolbar.ToolbarGroup,
								{ firstChild: true },
								_react2.default.createElement(_Toolbar.ToolbarTitle, { text: title, style: { fontSize: '16px' } }),
								add && _react2.default.createElement(
									'div',
									null,
									_react2.default.createElement(
										_IconButton2.default,
										{ disabled: this.props.display === 0, onTouchTap: this.handleTouchTap },
										_react2.default.createElement(_add2.default, { color: muiTheme.palette.primary1Color })
									),
									_react2.default.createElement(
										_Popover2.default,
										{
											open: this.state.openAdd,
											anchorEl: this.state.anchorEl,
											anchorOrigin: { horizontal: 'right', vertical: 'bottom' },
											targetOrigin: { horizontal: 'right', vertical: 'top' },
											onRequestClose: this.handleRequestClose
										},
										addRender
									)
								)
							)
						),
						_react2.default.createElement(
							'div',
							{ style: style.body },
							children
						)
					)
				)
			);
		}
	}]);

	return ChipsComponent;
}(_react.Component);

ChipsComponent.propTypes = {
	title: _react.PropTypes.string.isRequired,
	children: _react.PropTypes.node,
	add: _react.PropTypes.bool,
	addRender: _react.PropTypes.node,
	display: _react.PropTypes.number
};

ChipsComponent.contextTypes = {
	muiTheme: _react.PropTypes.object.isRequired
};

exports.default = ChipsComponent;