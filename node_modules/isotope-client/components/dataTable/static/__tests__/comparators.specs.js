'use strict';

var _comparators = require('../comparators');

var _comparators2 = _interopRequireDefault(_comparators);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var strings = ['a', 'b', null, undefined, 'A', null];
var numbers = [5, '3', null, 0, -5, undefined, "-6", null];
var dates = [null, undefined, '2017-01-22T14:03:27.0Z', 1485093807000, 1485093806000, '2017-01-22T15:03:27.0+01:00', null];

describe('tous types', function () {
	['string', 'date', 'number', null].map(function (type) {
		var comparator = (0, _comparators2.default)(type);
		it('null et undefined sont trait\xE9s de la m\xEAme fa\xE7on pour ' + type, function () {
			expect(comparator(null, undefined)).toBe(0);
		});
	});
});

describe('strings', function () {
	var comparator = (0, _comparators2.default)('string');

	it('tri sur les strings', function () {
		expect(strings.sort(comparator)).toEqual(['a', 'A', 'b', null, null, undefined]);
	});
});

describe('numbers', function () {
	var comparator = (0, _comparators2.default)('number');

	it('tri sur les numbers', function () {
		expect(numbers.sort(comparator)).toEqual(['-6', -5, 0, '3', 5, null, null, undefined]);
	});
});

describe('dates', function () {
	var comparator = (0, _comparators2.default)('date');

	it('tri sur les dates', function () {
		expect(dates.sort(comparator)).toEqual([1485093806000, '2017-01-22T14:03:27.0Z', 1485093807000, '2017-01-22T15:03:27.0+01:00', null, null, undefined]);
	});
	it('dates invalides', function () {
		expect(['test', 'test3', 10].sort(comparator)).toEqual([10, 'test', 'test3']);
	});
});