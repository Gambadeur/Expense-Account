'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
var nullOrUndefined = function nullOrUndefined(value) {
	return value === null || typeof value === 'undefined';
};

/**
 * Comparateur naturel entre deux chaînes de caractères.
 * @param v1
 * @param v2
 * @returns {number}
 */
var stringComparator = function stringComparator(v1, v2) {
	return v1.localeCompare(v2);
};

/**
 * Comparateur entre deux objets représentant des dates.
 *
 * Si on a directement des dates, ne pas préciser le `type` et utiliser
 * le comparateur classique.
 *
 * @param v1
 * @param v2
 * @returns {number}
 */
var dateComparator = function dateComparator(v1, v2) {
	var date1 = new Date(v1).getTime();
	var date2 = new Date(v2).getTime();
	if (isNaN(date1)) {
		return isNaN(date2) ? 0 : 1;
	} else if (isNaN(date2)) {
		return -1;
	}
	return date1 - date2;
};

/**
 * Comparateur entre deux objets représentant des nombres.
 * @param v1
 * @param v2
 * @returns {number}
 */
var numberComparator = function numberComparator(v1, v2) {
	return +v1 - +v2;
};

exports.default = function (type) {
	return function (v1, v2) {
		if (v1 === v2) return 0;
		if (nullOrUndefined(v1)) {
			return nullOrUndefined(v2) ? 0 : 1;
		} else if (nullOrUndefined(v2)) {
			return -1;
		}
		switch (type) {
			case 'string':
				return stringComparator(v1, v2);
			case 'number':
				return numberComparator(v1, v2);
			case 'date':
				return dateComparator(v1, v2);
			default:
				return v1 - v2;
		}
	};
};