'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.fromSpringPage = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _TableExampleComplex = require('./TableExampleComplex');

var _TableExampleComplex2 = _interopRequireDefault(_TableExampleComplex);

var _fetchEntities = require('../../entities/fetchEntities');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Méthode utilitaire qui adapte une réponse paginée par Spring au format
 * utilisé par notre composant Table.
 *
 * @param page
 */
var fromSpringPage = exports.fromSpringPage = function fromSpringPage(page) {
	var content = page.content,
	    first = page.first,
	    last = page.last,
	    number = page.number,
	    numberOfElements = page.numberOfElements,
	    size = page.size,
	    sort = page.sort,
	    totalElements = page.totalElements,
	    totalPages = page.totalPages;

	return {
		totalPages: totalPages,
		totalElements: totalElements,
		firstPage: first,
		lastPage: last,
		page: number + 1,
		pageSize: size,
		numberOfElements: numberOfElements,
		sort: sort,
		data: content
	};
};

var queryParams = function queryParams(params) {
	return params.map(function (param) {
		if (param.value != null && typeof param.value !== 'undefined') {
			return encodeURIComponent(param.name) + '=' + encodeURIComponent(param.value);
		}
		return '' + encodeURIComponent(param.name);
	}).join('&');
};

var buildUrlWithParams = function buildUrlWithParams(url, params) {
	if (!params) return url;
	return '' + url + (url.indexOf('?') === -1 ? '?' : '&') + queryParams(params);
};

var getHeaders = function getHeaders(headers, sort) {
	if (sort.length) {
		// TODO gérer la priorité des tris (ex: d'abord le nom, puis le prénom, etc.)
		return headers.map(function (header) {
			var matchSort = sort.filter(function (_sort) {
				return header.key === _sort.property;
			});
			if (matchSort.length > 0) {
				return _extends({}, header, {
					sorted: matchSort[0].direction
				});
			}
			return header;
		});
	}
	return headers;
};

var DataTable = function (_Component) {
	_inherits(DataTable, _Component);

	function DataTable(props) {
		_classCallCheck(this, DataTable);

		var _this = _possibleConstructorReturn(this, (DataTable.__proto__ || Object.getPrototypeOf(DataTable)).call(this, props));

		_this.state = {
			data: {},
			page: 1,
			pageSize: 20,
			sort: []
		};

		_this.handlePageChange = _this.handlePageChange.bind(_this);
		_this.handleElementsPerPageChange = _this.handleElementsPerPageChange.bind(_this);
		_this.handleFilterChange = _this.handleFilterChange.bind(_this);
		return _this;
	}

	_createClass(DataTable, [{
		key: 'componentWillMount',
		value: function componentWillMount() {
			this.getData();
		}
	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(newProps) {
			if (newProps.filters !== this.props.filters) {
				this.getData(newProps);
			}
		}
	}, {
		key: 'getData',
		value: function getData() {
			var _this2 = this;

			var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;

			// TODO récupérer les paramètres du state
			var _state = this.state,
			    page = _state.page,
			    pageSize = _state.pageSize,
			    sort = _state.sort;
			var apiUrl = props.apiUrl,
			    filters = props.filters,
			    preFetch = props.preFetch,
			    postFetch = props.postFetch;

			var params = [{
				name: 'page',
				value: page - 1
			}, {
				name: 'size',
				value: pageSize
			}];

			// TODO problème de cohérence avec les headers
			sort.forEach(function (_sort) {
				params.push({
					name: 'sort',
					value: _sort.property + ',' + _sort.direction
				});
			});

			//On exécute la fonction de pre exécution
			preFetch();

			var promise = void 0;
			if (this.props.mode === 'get') {
				// En mode get, tous les paramètres sont passées en get
				promise = (0, _fetchEntities.fetchFactory)(buildUrlWithParams(apiUrl, [].concat(params, _toConsumableArray(filters))));
			} else {
				// On passe les params en mode objet avec { key = value } (au lieu de { key: 'key', value: 'value' }
				promise = (0, _fetchEntities.fetchFactory)(buildUrlWithParams(apiUrl, params), {
					method: 'POST',
					body: JSON.stringify(filters.reduce(function (params, param) {
						return _extends({}, params, _defineProperty({}, param.name, param.value));
					}, {}))
				});
			}

			return promise.then(function (data) {
				var springData = fromSpringPage(data);
				_this2.setState({
					data: springData,
					// TODO éviter la répétition
					page: springData.page,
					pageSize: springData.pageSize,
					sort: (springData.sort || []).map(function (_sort) {
						return {
							property: _sort.property,
							direction: _sort.direction
						};
					})
				});
			}).then(postFetch)
			// TODO passer en props un handleError
			.catch(function (e) {
				return console.error(e);
			});
		}
	}, {
		key: 'handlePageChange',
		value: function handlePageChange(newPage) {
			var _this3 = this;

			this.setState({
				page: newPage
			}, function () {
				return _this3.getData();
			});
		}
	}, {
		key: 'handleElementsPerPageChange',
		value: function handleElementsPerPageChange(newPageSize) {
			var _this4 = this;

			var _state$data = this.state.data,
			    totalElements = _state$data.totalElements,
			    page = _state$data.page;

			var newTotalPages = Math.ceil(totalElements / newPageSize);
			this.setState({
				page: Math.min(page, newTotalPages),
				pageSize: newPageSize
			}, function () {
				return _this4.getData();
			});
		}
	}, {
		key: 'handleFilterChange',
		value: function handleFilterChange(property, direction) {
			var _this5 = this;

			// TODO sort multiples
			this.setState({
				sort: [{
					property: property,
					direction: direction
				}]
			}, function () {
				return _this5.getData();
			});
			// TODO se souvenir des filtres
		}
	}, {
		key: 'render',
		value: function render() {
			var _this6 = this;

			var _state2 = this.state,
			    data = _state2.data,
			    sort = _state2.sort;

			var _props = this.props,
			    headers = _props.headers,
			    otherProps = _objectWithoutProperties(_props, ['headers']);

			var computedHeaders = getHeaders(headers, sort);
			return _react2.default.createElement(_TableExampleComplex2.default, _extends({}, otherProps, data, {
				headers: computedHeaders,
				onPageChange: this.handlePageChange,
				onElementsPerPageChange: this.handleElementsPerPageChange,
				onFilterChange: this.handleFilterChange,
				onRowSelection: function onRowSelection(selection) {
					var onRowSelection = _this6.props.onRowSelection;

					if (onRowSelection) {
						if (selection === 'all') {
							onRowSelection(selection);
						} else if (selection === 'none') {
							onRowSelection([]);
						} else {
							onRowSelection(data.filter(function (el, idx) {
								return selection.indexOf(idx) >= 0;
							}));
						}
					}
				}
			}));
		}
	}]);

	return DataTable;
}(_react.Component);

DataTable.propTypes = {
	apiUrl: _react.PropTypes.string.isRequired,
	filters: _react.PropTypes.array,
	headers: _react.PropTypes.array,
	onRowSelection: _react.PropTypes.func,
	preFetch: _react.PropTypes.func,
	postFetch: _react.PropTypes.func,
	mode: _react2.default.PropTypes.oneOf(['post', 'get'])
};
DataTable.defaultProps = {
	filters: [],
	preFetch: function preFetch() {},
	postFetch: function postFetch() {},
	mode: 'get'
};

exports.default = DataTable;