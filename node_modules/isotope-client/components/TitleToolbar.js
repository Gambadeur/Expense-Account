'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Toolbar = require('material-ui/Toolbar');

var _FloatingActionButton = require('material-ui/FloatingActionButton');

var _FloatingActionButton2 = _interopRequireDefault(_FloatingActionButton);

var _chevronLeft = require('material-ui/svg-icons/navigation/chevron-left');

var _chevronLeft2 = _interopRequireDefault(_chevronLeft);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getStyles = function getStyles(props, muiTheme) {
	return {
		bar: {
			position: 'fixed',
			height: '91px',
			top: '47px',
			left: '256px',
			border: 0,
			background: muiTheme.titletoolbar.background,
			boxShadow: 0,
			paddingTop: '30px',
			paddingLeft: '98px',
			right: 0,
			zIndex: 1000
		},
		barLarge: {
			color: muiTheme.palette.accent1Color,
			paddingLeft: '30px',
			boxShadow: muiTheme.paper.zDepthShadows[0]
		},
		title: {
			textTransform: props.forceUppercase ? 'uppercase' : 'none',
			fontSize: '1.5em',
			color: muiTheme.palette.accent1Color,
			overflow: 'visible'
		},
		buttonBack: {
			height: '54px',
			marginRight: '25px'
		}
	};
};

var TitleToolbar = function TitleToolbar(props, _ref) {
	var muiTheme = _ref.muiTheme;
	var back = props.back,
	    backStyle = props.backStyle,
	    backIconStyle = props.backIconStyle,
	    backIcon = props.backIcon,
	    large = props.large,
	    children = props.children,
	    title = props.title,
	    styles = props.styles;

	var defaultStyles = getStyles(props, muiTheme);
	var barStyle = large ? _extends({}, defaultStyles.bar, defaultStyles.barLarge) : defaultStyles.bar;
	return _react2.default.createElement(
		_Toolbar.Toolbar,
		{ style: _extends({}, barStyle, styles.bar) },
		_react2.default.createElement(
			_Toolbar.ToolbarGroup,
			null,
			back && _react2.default.createElement(
				_FloatingActionButton2.default,
				{
					style: backStyle || defaultStyles.buttonBack,
					iconStyle: backIconStyle,
					secondary: true,
					onTouchTap: back
				},
				backIcon || _react2.default.createElement(_chevronLeft2.default, null)
			),
			_react2.default.createElement(_Toolbar.ToolbarTitle, { style: _extends({}, defaultStyles.title, styles.title), text: title })
		),
		_react2.default.createElement(
			_Toolbar.ToolbarGroup,
			null,
			children
		)
	);
};

TitleToolbar.propTypes = {
	title: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.element]).isRequired,
	back: _react.PropTypes.func,
	large: _react.PropTypes.bool,
	forceUppercase: _react.PropTypes.bool,
	withoutBorder: _react.PropTypes.bool,
	children: _react.PropTypes.node,
	backIcon: _react.PropTypes.node,
	backStyle: _react.PropTypes.object,
	backIconStyle: _react.PropTypes.object,
	styles: _react.PropTypes.shape({
		bar: _react.PropTypes.object,
		title: _react.PropTypes.object
	})
};
TitleToolbar.contextTypes = {
	muiTheme: _react.PropTypes.object.isRequired
};
TitleToolbar.defaultProps = {
	styles: {}
};

exports.default = TitleToolbar;