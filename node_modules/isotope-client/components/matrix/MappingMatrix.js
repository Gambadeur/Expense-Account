'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactIntl = require('react-intl');

var _FlatButton = require('material-ui/FlatButton');

var _FlatButton2 = _interopRequireDefault(_FlatButton);

var _Checkbox = require('material-ui/Checkbox');

var _Checkbox2 = _interopRequireDefault(_Checkbox);

var _Table = require('material-ui/Table');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MappingMatrix = function (_Component) {
	_inherits(MappingMatrix, _Component);

	function MappingMatrix(props) {
		_classCallCheck(this, MappingMatrix);

		var _this = _possibleConstructorReturn(this, (MappingMatrix.__proto__ || Object.getPrototypeOf(MappingMatrix)).call(this, props));

		_this.state = {
			mapping: []
		};

		_this.handleOnChange = _this.handleOnChange.bind(_this);
		_this.handleSelectAll = _this.handleSelectAll.bind(_this);
		_this.handleSubmit = _this.handleSubmit.bind(_this);
		_this.getMapping = _this.getMapping.bind(_this);
		return _this;
	}

	_createClass(MappingMatrix, [{
		key: 'componentWillMount',
		value: function componentWillMount() {
			var _this2 = this;

			var _props = this.props,
			    fetchColumns = _props.fetchColumns,
			    fetchLines = _props.fetchLines;

			this.getMapping();
			fetchColumns().then(function (columns) {
				_this2.setState({
					columns: columns
				});
			});
			fetchLines().then(function (lines) {
				_this2.setState({
					lines: lines
				});
			});
		}
	}, {
		key: 'getMapping',
		value: function getMapping() {
			var _this3 = this;

			var fetchMapping = this.props.fetchMapping;

			fetchMapping().then(function (mapping) {
				_this3.setState({
					mapping: mapping
				});
			});
		}
	}, {
		key: 'handleSubmit',
		value: function handleSubmit() {
			var mapping = this.state.mapping;
			var change = this.props.change;

			change(mapping);
		}
	}, {
		key: 'handleSelectAll',
		value: function handleSelectAll(colonneId) {
			var _state = this.state,
			    mapping = _state.mapping,
			    lines = _state.lines;
			// les lignes à mettre à jour sont les lignes qui ne sont pas déjà cochées

			var linesToMaj = lines.filter(function (line) {
				return !mapping.find(function (element) {
					return element.lineId === line.id && element.columnId === colonneId;
				});
			});

			if (linesToMaj.length === 0) {
				// Si toutes les cases étaient déjà cochées (je n'en ai trouvé aucune à cocher), je les décoche toutes
				this.setState({
					mapping: mapping.filter(function (asso) {
						return asso.columnId !== colonneId;
					})
				});
			} else {
				// Sinon, je coche les nouvelles lignes
				// On utilise un reduce où on prend comme base le mapping actuel et auquel on ajoute les nouvelles lignes
				this.setState({
					mapping: linesToMaj.reduce(function (newMapping, line) {
						return [].concat(_toConsumableArray(newMapping), [{ lineId: line.id, columnId: colonneId }]);
					}, mapping)
				});
			}
		}
	}, {
		key: 'handleOnChange',
		value: function handleOnChange(lineId, columnId, value) {
			var mapping = this.state.mapping;

			var oldIndex = mapping.findIndex(function (element) {
				return element.lineId === lineId.toString() && element.columnId === columnId.toString();
			});
			if (value) {
				// Je dois ajouter l'élément
				if (oldIndex < 0) {
					this.setState({
						mapping: [].concat(_toConsumableArray(mapping), [{ lineId: lineId.toString(), columnId: columnId.toString() }])
					});
				}
			} else {
				// Je dois retirer l'élément
				if (oldIndex > -1) {
					this.setState({
						mapping: [].concat(_toConsumableArray(mapping.slice(0, oldIndex)), _toConsumableArray(mapping.slice(oldIndex + 1)))
					});
				}
			}
		}
	}, {
		key: 'render',
		value: function render() {
			var _this4 = this;

			var _state2 = this.state,
			    mapping = _state2.mapping,
			    columns = _state2.columns,
			    lines = _state2.lines;
			var intPrefix = this.props.intPrefix;
			var muiTheme = this.context.muiTheme;

			return _react2.default.createElement(
				'div',
				null,
				mapping && columns && lines && _react2.default.createElement(
					_Table.Table,
					{
						selectable: false
					},
					_react2.default.createElement(
						_Table.TableHeader,
						{
							adjustForCheckbox: false,
							displaySelectAll: false,
							enableSelectAll: false
						},
						_react2.default.createElement(
							_Table.TableRow,
							null,
							_react2.default.createElement(_Table.TableHeaderColumn, null),
							columns.map(function (element, index) {
								return _react2.default.createElement(
									_Table.TableHeaderColumn,
									{
										key: index,
										style: { color: muiTheme.palette.black, fontWeight: 'bold' }
									},
									_react2.default.createElement(_reactIntl.FormattedMessage, {
										id: intPrefix ? intPrefix + '.' + element.code.toLowerCase() : '' + element.code.toLowerCase()
									})
								);
							})
						),
						_react2.default.createElement(
							_Table.TableRow,
							null,
							_react2.default.createElement(
								_Table.TableHeaderColumn,
								null,
								_react2.default.createElement(_reactIntl.FormattedMessage, { id: 'TABLE_SELECT_ALL' })
							),
							columns.map(function (element, index) {
								return _react2.default.createElement(
									_Table.TableHeaderColumn,
									{ key: index },
									_react2.default.createElement(_Checkbox2.default, {
										checked: lines.filter(function (line) {
											return !mapping.find(function (asso) {
												return asso.lineId === line.id && asso.columnId === element.id;
											});
										}).length === 0,
										onCheck: function onCheck() {
											return _this4.handleSelectAll(element.id);
										}
									})
								);
							})
						)
					),
					_react2.default.createElement(
						_Table.TableBody,
						{
							displayRowCheckbox: false,
							showRowHover: true
						},
						lines.map(function (line, indexLine) {
							return _react2.default.createElement(
								_Table.TableRow,
								{
									key: indexLine,
									hoverable: true,
									selectable: false
								},
								_react2.default.createElement(
									_Table.TableRowColumn,
									null,
									_react2.default.createElement(_reactIntl.FormattedMessage, {
										id: intPrefix ? intPrefix + '.' + line.code.toLowerCase() : '' + line.code.toLowerCase()
									})
								),
								columns.map(function (column, index) {
									var checked = mapping.find(function (element) {
										return element.lineId === line.id && element.columnId === column.id;
									}) !== undefined;
									return _react2.default.createElement(
										_Table.TableRowColumn,
										{ key: index },
										_react2.default.createElement(_Checkbox2.default, {
											checked: checked,
											onCheck: function onCheck(event, isInputChecked) {
												_this4.handleOnChange(line.id, column.id, isInputChecked);
											}
										})
									);
								})
							);
						})
					)
				),
				_react2.default.createElement(
					'div',
					{ className: 'col-xs-12', style: { marginTop: '20px', textAlign: 'right' } },
					_react2.default.createElement(_FlatButton2.default, {
						label: 'Annuler',
						onClick: this.getMapping
					}),
					_react2.default.createElement(
						_FlatButton2.default,
						{
							onTouchTap: this.handleSubmit,
							primary: true
						},
						'Valider'
					)
				)
			);
		}
	}]);

	return MappingMatrix;
}(_react.Component);

MappingMatrix.propTypes = {
	/**
  * Promesse qui permet de récupérer le mapping entre les colonnes et les lignes de ma matrice.
  * format : tableau de { lineId, colonneId }
  */
	fetchMapping: _react.PropTypes.func.isRequired,
	/**
  * Promesse qui permet de récupérer les colonnes de ma matrice.
  * format : tableau de { id, code }
  */
	fetchColumns: _react.PropTypes.func.isRequired,
	/**
  * Promesse qui permet de récupérer les lignes de ma matrice.
  * format : tableau de { id, code }
  */
	fetchLines: _react.PropTypes.func.isRequired,
	/**
  * Fonction utilisée lors du clic sur le bouton valider du composant. Le paramètre mapping est du même format
  * que le retour de fetchMapping
  */
	change: _react.PropTypes.func.isRequired,
	/**
  * Préfixe intl utilisé pour récupérer les libellés des colonnes et des lignes (concaténation du préfixe + code).
  */
	intPrefix: _react.PropTypes.string
};
MappingMatrix.contextTypes = {
	muiTheme: _react.PropTypes.object.isRequired
};

exports.default = MappingMatrix;