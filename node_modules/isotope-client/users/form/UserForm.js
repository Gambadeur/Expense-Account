'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.fields = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _reactIntl = require('react-intl');

var _reduxForm = require('redux-form');

var _reduxFormMaterialUi = require('redux-form-material-ui');

var _Dialog = require('material-ui/Dialog');

var _Dialog2 = _interopRequireDefault(_Dialog);

var _FlatButton = require('material-ui/FlatButton');

var _FlatButton2 = _interopRequireDefault(_FlatButton);

var _MenuItem = require('material-ui/MenuItem');

var _MenuItem2 = _interopRequireDefault(_MenuItem);

var _usersActions = require('../usersActions');

var actions = _interopRequireWildcard(_usersActions);

var _usersSelectors = require('../usersSelectors');

var selectors = _interopRequireWildcard(_usersSelectors);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var fields = exports.fields = ['id', 'login', 'lastname', 'firstname', 'email', 'phoneNumber', 'company', 'role', 'passwordRepeated', 'password'];

var validate = function validate(values) {
	var errors = {};
	return errors;
};

var UserForm = function (_Component) {
	_inherits(UserForm, _Component);

	function UserForm(props) {
		_classCallCheck(this, UserForm);

		var _this = _possibleConstructorReturn(this, (UserForm.__proto__ || Object.getPrototypeOf(UserForm)).call(this, props));

		_this.annuler = _this.annuler.bind(_this);
		_this.submitUser = _this.submitUser.bind(_this);
		return _this;
	}

	_createClass(UserForm, [{
		key: 'annuler',
		value: function annuler() {
			this.props.cancelEditUser();
		}
	}, {
		key: 'submitUser',
		value: function submitUser(data) {
			var _props = this.props,
			    saveUser = _props.saveUser,
			    saveAddUser = _props.saveAddUser;

			if (data.id > 0) {
				return saveUser(data);
			} else {
				return saveAddUser(data);
			}
		}
	}, {
		key: 'render',
		value: function render() {
			var _props2 = this.props,
			    handleSubmit = _props2.handleSubmit,
			    initialValues = _props2.initialValues;

			return _react2.default.createElement(
				_Dialog2.default,
				{
					title: initialValues.id < 0 ? 'Ajout d\' utilisateur' : 'Modifier un utilisateur',
					actions: [_react2.default.createElement(_FlatButton2.default, {
						label: 'Annuler',
						primary: true,
						onTouchTap: this.annuler
					}), _react2.default.createElement(_FlatButton2.default, {
						label: 'Valider',
						type: 'submit',
						primary: true,
						onTouchTap: handleSubmit(this.submitUser)
					})],
					autoScrollBodyContent: true,
					modal: true,
					open: true
				},
				_react2.default.createElement(
					'form',
					{
						autoComplete: 'off',
						onSubmit: handleSubmit(this.submitUser)
					},
					_react2.default.createElement(_reduxForm.Field, {
						name: 'login',
						floatingLabelText: 'Identifiant',
						fullWidth: true,
						component: _reduxFormMaterialUi.TextField
					}),
					_react2.default.createElement(_reduxForm.Field, {
						name: 'password',
						hintText: 'Laissez vide pour ne pas mettre \xE0 jour',
						floatingLabelText: 'Mot de passe',
						type: 'password',
						fullWidth: true,
						component: _reduxFormMaterialUi.TextField
					}),
					_react2.default.createElement(_reduxForm.Field, {
						name: 'passwordRepeated',
						floatingLabelText: 'Confirmation',
						type: 'password',
						fullWidth: true,
						component: _reduxFormMaterialUi.TextField
					}),
					_react2.default.createElement(_reduxForm.Field, {
						name: 'firstname',
						floatingLabelText: 'Nom',
						fullWidth: true,
						component: _reduxFormMaterialUi.TextField
					}),
					_react2.default.createElement(_reduxForm.Field, {
						name: 'lastname',
						floatingLabelText: 'Pr\xE9nom',
						fullWidth: true,
						component: _reduxFormMaterialUi.TextField
					}),
					_react2.default.createElement(_reduxForm.Field, {
						name: 'email',
						floatingLabelText: 'Mail',
						fullWidth: true,
						component: _reduxFormMaterialUi.TextField
					}),
					_react2.default.createElement(_reduxForm.Field, {
						name: 'phoneNumber',
						floatingLabelText: 'T\xE9l\xE9phone',
						fullWidth: true,
						component: _reduxFormMaterialUi.TextField
					}),
					_react2.default.createElement(_reduxForm.Field, {
						name: 'company',
						floatingLabelText: 'Soci\xE9t\xE9',
						fullWidth: true,
						component: _reduxFormMaterialUi.TextField
					}),
					_react2.default.createElement(_reduxForm.Field, {
						name: 'role',
						floatingLabelText: 'Profil',
						fullWidth: true,
						component: _reduxFormMaterialUi.TextField
					})
				)
			);
		}
	}]);

	return UserForm;
}(_react.Component);

UserForm.propTypes = {
	asyncValidating: _react.PropTypes.bool.isRequired,
	handleSubmit: _react.PropTypes.func.isRequired,
	submitting: _react.PropTypes.bool.isRequired,
	cancelEditUser: _react.PropTypes.func.isRequired,
	saveUser: _react.PropTypes.func.isRequired,
	saveAddUser: _react.PropTypes.func.isRequired,
	initialValues: _react.PropTypes.object.isRequired
};

var mapStateToProps = function mapStateToProps(state) {
	var user = selectors.getEditingUser(state);
	return {
		initialValues: {
			id: user.id || -1,
			login: user.login || undefined,
			lastname: user.lastname || undefined,
			firstname: user.firstname || undefined,
			email: user.email || undefined,
			phoneNumber: user.phoneNumber || undefined,
			company: user.company || undefined,
			role: user.role || undefined
		}
	};
};

var dispatchToProps = {
	cancelEditUser: actions.cancelEditUser,
	saveUser: actions.saveUser,
	saveAddUser: actions.saveAddUser
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, dispatchToProps)((0, _reduxForm.reduxForm)({
	form: 'UserForm',
	validate: validate
})(UserForm));