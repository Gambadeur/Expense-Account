'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _rolesActions = require('./rolesActions');

var actions = _interopRequireWildcard(_rolesActions);

var _redux = require('redux');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// On stocke les roles par id
var byId = function byId() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	var action = arguments[1];

	switch (action.type) {
		case actions.GET_ROLES_SUCCESS:
			return action.roles.reduce(function (res, role) {
				return _extends({}, res, _defineProperty({}, role.id, role));
			}, _extends({}, state));
		default:
			return state;
	}
};

// On stocke les id des roles
var allIds = function allIds() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	var action = arguments[1];

	switch (action.type) {
		case actions.GET_ROLES_SUCCESS:
			return action.roles.map(function (item) {
				return item.id;
			});
		default:
			return state;
	}
};

exports.default = (0, _redux.combineReducers)({
	byId: byId,
	allIds: allIds
});