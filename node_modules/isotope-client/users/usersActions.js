'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.saveAddUser = exports.saveDeleteUser = exports.saveUser = exports.cancelEditUser = exports.editUser = exports.cancelDeleteUser = exports.deleteUser = exports.addUser = exports.getUsers = exports.DELETE_USER_ERROR = exports.DELETE_USER_SUCCESS = exports.DELETE_USER_REQUEST = exports.ADD_USER_ERROR = exports.ADD_USER_SUCCESS = exports.ADD_USER_REQUEST = exports.SAVE_USER_ERROR = exports.SAVE_USER_SUCCESS = exports.SAVE_USER_REQUEST = exports.CANCEL_DELETE_USER = exports.DELETE_USER = exports.CANCEL_EDIT_USER = exports.EDIT_USER = exports.ADD_USER = exports.GET_USERS_ERROR = exports.GET_USERS_SUCCESS = exports.GET_USERS_REQUEST = undefined;

var _reduxForm = require('redux-form');

var _usersApi = require('./usersApi');

var api = _interopRequireWildcard(_usersApi);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// ACTION CONSTANTS --------------------------------------
var GET_USERS_REQUEST = exports.GET_USERS_REQUEST = 'GET_USERS_REQUEST';
var GET_USERS_SUCCESS = exports.GET_USERS_SUCCESS = 'GET_USERS_SUCCESS';
var GET_USERS_ERROR = exports.GET_USERS_ERROR = 'GET_USERS_ERROR';

var ADD_USER = exports.ADD_USER = 'ADD_USER';
var EDIT_USER = exports.EDIT_USER = 'EDIT_USER';
var CANCEL_EDIT_USER = exports.CANCEL_EDIT_USER = 'CANCEL_EDIT_USER';

var DELETE_USER = exports.DELETE_USER = 'DELETE_USER';
var CANCEL_DELETE_USER = exports.CANCEL_DELETE_USER = 'CANCEL_DELETE_USER';

var SAVE_USER_REQUEST = exports.SAVE_USER_REQUEST = 'SAVE_USER_REQUEST';
var SAVE_USER_SUCCESS = exports.SAVE_USER_SUCCESS = 'SAVE_USER_SUCCESS';
var SAVE_USER_ERROR = exports.SAVE_USER_ERROR = 'SAVE_USER_ERROR';

var ADD_USER_REQUEST = exports.ADD_USER_REQUEST = 'ADD_USER_REQUEST';
var ADD_USER_SUCCESS = exports.ADD_USER_SUCCESS = 'ADD_USER_SUCCESS';
var ADD_USER_ERROR = exports.ADD_USER_ERROR = 'ADD_USER_ERROR';

var DELETE_USER_REQUEST = exports.DELETE_USER_REQUEST = 'DELETE_USER_REQUEST';
var DELETE_USER_SUCCESS = exports.DELETE_USER_SUCCESS = 'DELETE_USER_SUCCESS';
var DELETE_USER_ERROR = exports.DELETE_USER_ERROR = 'DELETE_USER_ERROR';

var getUsers = exports.getUsers = function getUsers() {
	return function (dispatch) {
		// Je dispatch une request pour Ã©ventuellement afficher des loader
		dispatch({ type: GET_USERS_REQUEST });
		return api.getUsers().then(function (data) {
			return dispatch({ type: GET_USERS_SUCCESS, users: data });
		}, function (err) {
			return dispatch({ type: GET_USERS_ERROR, err: err });
		});
	};
};

var addUser = exports.addUser = function addUser() {
	return function (dispatch) {
		dispatch({
			type: ADD_USER
		});
	};
};

var deleteUser = exports.deleteUser = function deleteUser(id) {
	return function (dispatch) {
		dispatch({
			type: DELETE_USER,
			id: id
		});
	};
};

var cancelDeleteUser = exports.cancelDeleteUser = function cancelDeleteUser() {
	return function (dispatch) {
		dispatch({
			type: CANCEL_DELETE_USER
		});
	};
};

var editUser = exports.editUser = function editUser(id) {
	return function (dispatch) {
		dispatch({
			type: EDIT_USER,
			id: id
		});
	};
};

var cancelEditUser = exports.cancelEditUser = function cancelEditUser() {
	return function (dispatch) {
		dispatch({
			type: CANCEL_EDIT_USER
		});
	};
};

var saveUser = exports.saveUser = function saveUser(user) {
	return function (dispatch) {
		dispatch({ type: SAVE_USER_REQUEST });
		return api.saveUser(user).then(function (data) {
			dispatch({ type: SAVE_USER_SUCCESS, data: data });
			return data;
		}).catch(function (e) {
			dispatch({ type: SAVE_USER_ERROR, e: e });
			console.log(e);
			throw new _reduxForm.SubmissionError(e);
		});
	};
};

var saveDeleteUser = exports.saveDeleteUser = function saveDeleteUser(id) {
	return function (dispatch) {
		dispatch({ type: DELETE_USER_REQUEST });
		return api.deleteUser(id).then(function () {
			return dispatch({ type: DELETE_USER_SUCCESS, id: id });
		}, function (err) {
			return dispatch({ type: DELETE_USER_ERROR, err: err });
		});
	};
};

var saveAddUser = exports.saveAddUser = function saveAddUser(user) {
	return function (dispatch) {
		dispatch({ type: ADD_USER_REQUEST });
		return api.addUser(user).then(function (data) {
			dispatch({ type: ADD_USER_SUCCESS, data: data });
			return data;
		}).catch(function (e) {
			dispatch({ type: ADD_USER_ERROR, e: e });
			throw new _reduxForm.SubmissionError(e);
		});
	};
};