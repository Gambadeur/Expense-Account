'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _usersActions = require('./usersActions');

var actions = _interopRequireWildcard(_usersActions);

var _redux = require('redux');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// On stocke les utilisateurs par id
var byId = function byId() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	var action = arguments[1];

	switch (action.type) {
		case actions.GET_USERS_SUCCESS:
			return action.users.reduce(function (res, user) {
				return _extends({}, res, _defineProperty({}, user.id, user));
			}, _extends({}, state));
		case actions.ADD_USER_SUCCESS:
		case actions.SAVE_USER_SUCCESS:
			return _extends({}, state, _defineProperty({}, action.data.id, action.data));
		case actions.DELETE_USER_SUCCESS:
			var newState = _extends({}, state);
			delete newState[action.id];
			return newState;
		default:
			return state;
	}
};

// On stocke les id d'utilisateurs
var allIds = function allIds() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	var action = arguments[1];

	switch (action.type) {
		case actions.GET_USERS_SUCCESS:
			return action.users.map(function (item) {
				return item.id;
			});
		case actions.DELETE_USER_SUCCESS:
			return state.filter(function (id) {
				return id !== action.id;
			});
		case actions.ADD_USER_SUCCESS:
			return [].concat(_toConsumableArray(state), [action.data.id]);
		default:
			return state;
	}
};

// Tells whether we are currently fetchin data from api
var isFetching = function isFetching() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	var action = arguments[1];

	switch (action.type) {
		case actions.GET_USERS_REQUEST:
			return true;
		case actions.GET_USERS_SUCCESS:
		case actions.GET_USERS_ERROR:
			return false;
		default:
			return state;
	}
};

// Si un utilisateur est en cours d'édition, on le trouvera ici
var idEditingUser = function idEditingUser() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	var action = arguments[1];

	switch (action.type) {
		case actions.ADD_USER:
			return -1;
		case actions.EDIT_USER:
			return action.id;
		case actions.SAVE_USER_SUCCESS:
		case actions.ADD_USER_SUCCESS:
		case actions.CANCEL_EDIT_USER:
			return 0;
		default:
			return state;
	}
};

// Si un utilisateur est en cours d'édition, on le trouvera ici
var idDeletingUser = function idDeletingUser() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
	var action = arguments[1];

	switch (action.type) {
		case actions.DELETE_USER:
			return action.id;
		case actions.DELETE_USER_SUCCESS:
		case actions.CANCEL_DELETE_USER:
		case actions.DELETE_USER_ERROR:
			return -1;
		default:
			return state;
	}
};

exports.default = (0, _redux.combineReducers)({
	byId: byId,
	allIds: allIds,
	isFetching: isFetching,
	idEditingUser: idEditingUser,
	idDeletingUser: idDeletingUser
});