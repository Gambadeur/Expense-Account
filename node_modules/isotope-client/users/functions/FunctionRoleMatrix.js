'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _matrix = require('../../components/matrix');

var _matrix2 = _interopRequireDefault(_matrix);

var _functionRoleApi = require('./functionRoleApi');

var _functionApi = require('./functionApi');

var _roleApi = require('../role/roleApi');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FunctionRoleMatrix = function (_Component) {
	_inherits(FunctionRoleMatrix, _Component);

	function FunctionRoleMatrix() {
		_classCallCheck(this, FunctionRoleMatrix);

		return _possibleConstructorReturn(this, (FunctionRoleMatrix.__proto__ || Object.getPrototypeOf(FunctionRoleMatrix)).apply(this, arguments));
	}

	_createClass(FunctionRoleMatrix, [{
		key: 'componentWillMount',
		value: function componentWillMount() {
			/*fetchFactory()*/
		}
	}, {
		key: 'render',
		value: function render() {
			return _react2.default.createElement(_matrix2.default, {
				fetchMapping: function fetchMapping() {
					return (0, _functionRoleApi.getAssos)().then(function (assos) {
						return assos.map(function (asso) {
							return {
								lineId: asso.idFunction,
								columnId: asso.idRole
							};
						});
					});
				},
				fetchColumns: _roleApi.getRoles,
				fetchLines: _functionApi.getFunctions,
				change: function change(mapping) {
					(0, _functionRoleApi.changeAsso)(mapping.map(function (asso) {
						return {
							idFunction: asso.lineId,
							idRole: asso.columnId
						};
					}));
				},
				title: 'Test',
				intPrefix: undefined
			});
		}
	}]);

	return FunctionRoleMatrix;
}(_react.Component);

exports.default = FunctionRoleMatrix;